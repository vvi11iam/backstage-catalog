apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: go-api
  title: New Go API
  description: Deploy a New Go API
spec:
  owner: user:guest
  type: service

  parameters:
    - title: Choose a Repo location
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location for your new Go API to Deploy
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com
    - title: Basic API Configuration
      required:
        - apiName
        - imageName
      properties:
        apiName:
          title: API Name
          type: string
          description: The name of the API
          ui:autofocus: true
        imageName:
          title: Container Image Name
          type: string
          description: The name of your container image

  steps:
    - id: fetch-base
      name: Fetch Base
      action: fetch:template
      input:
        url: ./content
        values:
          imageName: ${{ parameters.imageName }}
          apiName: ${{ parameters.apiName }}
    # This step publishes the contents of the working directory to GitHub.
    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts: ['github.com']
        description: This is ${{ parameters.imageName }}
        repoUrl: ${{ parameters.repoUrl }}
    # Start a GitHub Action to build our API
    - id: github-action
      name: Trigger GitHub Action
      action: github:actions:dispatch
      input:
        workflowId: go_api.yaml
        repoUrl: 'github.com?repo=crossplane-gke&owner=samgabrail'
        branchOrTagName: 'main'
        workflowInputs:
          imageName: ${{ parameters.imageName }}
          apiName: ${{ parameters.apiName }}
          repoURLforArgo: ${{ steps['publish'].output.remoteUrl }}
          k8sClusterURLforArgo: https://34.172.166.21 # you will need to update this depending on what cluster you want your developers to deploy apps to
    # The final step is to register our new component in the catalog.
    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['publish'].output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'

  output:
    links:
      - title: Repository
        url: ${{ steps['publish'].output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps['register'].output.entityRef }}
